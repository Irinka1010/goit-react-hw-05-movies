{"version":3,"file":"static/js/99.265b7db1.chunk.js","mappings":"6PACe,SAASA,EAAT,GAAmC,IAC1CC,EADyC,EAAXC,QACXC,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,GAC/C,OACE,2BACE,uBAAID,KACJ,uBAAID,MAFGE,EAKZ,IAED,OAAO,wBAAKL,GACb,CCPc,SAASM,IACtB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAON,EAAP,KAAgBO,EAAhB,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACQC,GAAaC,EAAAA,EAAAA,MAAbD,SAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACR,KAAIZ,EAAQa,OAAS,GAArB,CAGA,IAAMC,EAAY,mCAAG,8GAEEC,EAAAA,EAAAA,IAAWL,GAFb,OAEXM,EAFW,OAGjBT,EAAWS,GAHM,gDAKjBP,EAAS,EAAD,IALS,yDAAH,qDAQlBK,GATC,CAUF,GAAE,CAACJ,EAAUV,EAAQa,UAGpB,gCACGL,IAAS,iDACV,wBACsB,IAAnBR,EAAQa,QACP,SAACf,EAAD,CAAaE,QAASA,KAEtB,mEAKT,C","sources":["components/ListReviews/ListReviews.jsx","pages/MovieDetails/Reviews/Reviews.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nexport default function ListReviews({ reviews }) {\n  const elements = reviews.map(({ content, author, id }) => {\n    return (\n      <li key={id}>\n        <p>{author}</p>\n        <p>{content}</p>\n      </li>\n    );\n  });\n\n  return <ul>{elements}</ul>;\n}\nListReviews.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviews } from 'Services/API';\nimport ListReviews from 'components/ListReviews/ListReviews';\nexport default function Reviews() {\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(null);\n  const { moviesId } = useParams();\n\n  useEffect(() => {\n    if (reviews.length > 0) {\n      return;\n    }\n    const fetchReviews = async () => {\n      try {\n        const data = await getReviews(moviesId);\n        setReviews(data);\n      } catch (error) {\n        setError(error);\n      }\n    };\n    fetchReviews();\n  }, [moviesId, reviews.length]);\n\n  return (\n    <>\n      {error && <p>Something went wrong</p>}\n      <ul>\n        {reviews.length !== 0 ? (\n          <ListReviews reviews={reviews} />\n        ) : (\n          <p>We don't have reviews of this movie</p>\n        )}\n      </ul>\n    </>\n  );\n}\n"],"names":["ListReviews","elements","reviews","map","content","author","id","Reviews","useState","setReviews","error","setError","moviesId","useParams","useEffect","length","fetchReviews","getReviews","data"],"sourceRoot":""}